-------------POST---------------
///////////////////////////////
//        Page: Login        //
///////////////////////////////

/auth/login

request: {
  username: STRING, 
  password: INT
}

-------------GET---------------
///////////////////////////////
//        Page: Logout       //
///////////////////////////////

/auth/logout

// destroy session 

-------------POST---------------
///////////////////////////////
//       Page: Signup        //
///////////////////////////////

/auth/signup

request: {
  username: STRING,
  password: INT,
  firstname: STRING,
  lastname: STRING,
  email: STRING, ***NEW*** as of 6/4/2015
  isInstructor: BOOLEAN,
  PermissionKey: INT  // only for instructors 
}


-------------GET---------------
////////////////////////////////////
// Utility API Call to Check Auth //
////////////////////////////////////

/checkauth

return:
//if session not found
{
  isAuthed: false
}

//if session is validated
{
  isAuthed: true
  username: <req.session.user>
}

-------------GET---------------
///////////////////////////////
// Page: Dashboard (profile)//
///////////////////////////////

/user/<username>    

return:
User = { // Student or Instructor
  isInstructor: BOOLEAN,
  username: STRING,
  lastname: STRING,
  ranks: UserRank[] // array of UserRank objects 
}

UserRank = {
  disciplineTitle: STRING,
  rankNum: INT,
  rankTitle: STRING,
  rankIcon: URL(STRING)
}

-------------GET---------------
///////////////////////////////
// Page: Dashboard (progress)//
///////////////////////////////

/user/<username>/progress     

return:
DisciplineProgress[] // array of DisciplineProgress objects 

** NEW **
/user/<username>/progress/<disciplineId>

return:
DisciplineProgress = { 
  discipline: Discipline{},  
  currentClassNum: INT,
  currentLevelNum: INT,
  currentLevel: Level{},
  percentage: INT // eg. 34 (%)
}

>> discipline, class, level routes should check session user's progress, to see if
   the resource is accessible for it, if not should return 403 Forbidden
<<

-------------GET---------------
///////////////////////////////
//   Page: Training Center   //
///////////////////////////////

/discipline   

return:
Discipline[]  // array of Discipline objects

/discipline/<discipline_id>

return:
Discipline = {
  disciplineId: INT,
  title: STRING,
  description: STRING, 
  disciplineLogo: STRING (URL),
  classes: Class[],
  totalClass: INT
}

-------------GET---------------
///////////////////////////////
//        Page: Class        //
///////////////////////////////

/discipline/<discipline_id>/class

return:
Class[]

/discipline/<discipline_id>/class/<class_num>

return:
Class = {
  classNum: INT,
  disciplineId: INT,
  instructorId: INT,
  instructorName: STRING, 
  instructorRank: INT,
  instructorRankTitle: STRING,
  title: STRING,
  description: STRING,
  classImage: STRING (URL),
  totalLevel: INT  //how many levels there are in this particular class
}



-------------GET---------------
///////////////////////////////
//        Page: Level        //
///////////////////////////////

/discipline/<discipline_id>/class/<class_num>/level

return: Level[]  // array of Level objects 


/discipline/<discipline_id>/class/<class_num>/level/<level_num>

return:
Level = {
  disciplineId: INT, ** NEW **
  classNum: INT, ** NEW **
  levelNum: INT,
  title: STRING,
  description: STRING,
  videoUrl: URL(STRING),
  feedbackNeeded: false,
  prev: Boolean,
  next: Boolean
}


-------------GET---------------
////////////////////////////////
// Page: Feedback & Dashboard //
////////////////////////////////

/user/<username>/feedbacks    [AUTH: if user is an Instructor, need to match]

return:
UserFeedbacks = Feedback[]  // array of Feedback objects


-------------GET---------------

/feedback/<feedback_id>    [AUTH: Instructor, Creator (*only instructor and creator)]

return:
Feedback = {
  feedbackId: INT,
  studentUsername: STRING,
  instrUsername: STRING,
  videoUrl: URL(STRING),
  comment: String,
  class: Class,
  approved: Boolean
}

-------------POST---------------
////////////////////////////////
//      Page: Level (last)    //
////////////////////////////////

/feedback/submit

request:
{
  username: STRING,
  classNum: INT,
  videoUrl: URL(STRING)
}

return: Feedback


-------------PUT---------------
//////////////////////////////////////
//    Page: Feedback (instructor)   //
//////////////////////////////////////

>> if approved, should also update user progress, (and RANK!!) <<

/feedback/<feedback_id>/update   [AUTH: Instructor (*only instructor can update)]
request:
{
  approved: Boolean // [AUTH: Instructor]
  comment: STRING
}

return: Feedback

